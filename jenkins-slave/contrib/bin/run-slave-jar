#!/bin/bash
#
# This script is meant to be run by the Jenkins when addint a new slave:
#
# Launch method: Launch slave via execution of command on the Master
# Launch command: /usr/local/bin/launch-slave.sh
#
# This command will then connect to the slave pod and execute this script:

HOME=/opt/app-root/jenkins

function generate_passwd_file() {
  export USER_ID=$1
  export GROUP_ID=$2
  envsubst < /opt/app-root/jenkins/passwd.template > /opt/app-root/jenkins/passwd
  export LD_PRELOAD=libnss_wrapper.so
  export NSS_WRAPPER_PASSWD=/opt/app-root/jenkins/passwd
  export NSS_WRAPPER_GROUP=/etc/group
}

# Assign 'jenkins' as a user name to the random UID openshift runs this container
generate_passwd_file `id -u` `id -g`

# TODO: Do not assume the URL is this, make this a parameter.
SLAVE_URL="http://jenkins:8080/jnlpJars/slave.jar"

# Wait for Jenkins master to be up. This will wait up to 5 minutes and then give up.
retries=0
until [ $retries -ge 300 ]; do
  retries=$[$retries+1]
  echo "Attempt #${retries} to download ${SLAVE_URL} ..."
  curl -Ss ${SLAVE_URL} -o ${HOME}/slave.jar
  # Jenkins will send some junk when it is not fully up, check the MIME type of
  # the slave.jar to make sure it is JAR.
  [[ "$(file -b --mime-type ${HOME}/slave.jar)" == "application/zip" ]] && break
  echo "Failed to download slave.jar from Jenkins master, retrying ..." && sleep 1
done

echo "Starting Jenkins slave agent in ${HOME} directory ..."
cd ${HOME} && exec java -jar /opt/app-root/jenkins/slave.jar -jar-cache ${HOME}
